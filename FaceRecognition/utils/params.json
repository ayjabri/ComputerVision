classifiers = {
    'RandomForestClassifier':{'n_estimators':100,
                            ' criterion':['gini','entropy'],
                            ' max_depth':range(1,51),
                            ' min_samples_split':range(1,11),
                            ' min_samples_leaf':range(1,5),
                            ' min_weight_fraction_leaf':0.0,
                            ' max_features':'auto',
                            ' max_leaf_nodes':None,
                            ' min_impurity_decrease':0.0,
                            ' min_impurity_split':None,
                            ' bootstrap':True,
                            ' oob_score':False,
                            ' n_jobs':None,
                            ' random_state':None,
                            ' verbose':0,
                            ' warm_start':False,
                            ' class_weight':None,
                            ' ccp_alpha':0.0,
                            ' max_samples':None},
    'KNeighborsClassifier': {'n_neighbors':range(1,51),
                            'weights':'uniform',
                            'algorithm':['auto','KDTree','BallTree'],
                            'leaf_size':range(1,61),
                            'p':2,
                            'metric':'minkowski',
                            'metric_params':None,
                            'n_jobs':None},
    'DecisionTreeClassifier': {'criterion':'gini',
                            'splitter':'best',
                            'max_depth':range(1,51),
                            'min_samples_split':range(2,11),
                            'min_samples_leaf':1,
                            'min_weight_fraction_leaf':0.0,
                            'max_features':None,
                            'random_state':None,
                            'max_leaf_nodes':None,
                            'min_impurity_decrease':0.0,
                            'min_impurity_split':None,
                            'class_weight':None,
                            'ccp_alpha':0.0},
    'LogisticRegression':   {'C': [0.1,0.5,1,5,10,50,100],
                            'class_weight': None,
                            'dual': False,
                            'fit_intercept': True,
                            'intercept_scaling': 1,
                            'l1_ratio': None,
                            'max_iter': 100,
                            'multi_class': 'auto',
                            'n_jobs': None,
                            'penalty': 'l2',
                            'random_state': None,
                            'solver': 'lbfgs',
                            'tol': 0.0001,
                            'verbose': 0,
                            'warm_start': False},
    'SVC':                  {'C': [0.1,0.5,1,5,10,50,100],
                            'break_ties': False,
                            'cache_size': 200,
                            'class_weight': None,
                            'coef0': 0.0,
                            'decision_function_shape': 'ovr',
                            'degree': 3,
                            'gamma': [0.1,0.5,1,3,6,10],
                            'kernel': 'rbf',
                            'max_iter': -1,
                            'probability': False,
                            'random_state': None,
                            'shrinking': True,
                            'tol': 0.001,
                            'verbose': False}
}