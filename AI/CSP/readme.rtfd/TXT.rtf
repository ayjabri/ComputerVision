{\rtf1\ansi\ansicpg1252\cocoartf2512
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 Verdana-Bold;\f2\fnil\fcharset0 Verdana;
\f3\fnil\fcharset0 HelveticaNeue;\f4\froman\fcharset0 Palatino-Bold;\f5\fswiss\fcharset0 Helvetica;
\f6\fnil\fcharset0 Verdana-Italic;\f7\froman\fcharset0 Palatino-Italic;\f8\fmodern\fcharset0 CourierNewPSMT;
\f9\fmodern\fcharset0 CourierNewPS-BoldMT;\f10\froman\fcharset0 Palatino-Roman;\f11\fswiss\fcharset0 Helvetica-Bold;
}
{\colortbl;\red255\green255\blue255;\red55\green55\blue55;\red255\green255\blue255;\red12\green96\blue165;
\red251\green0\blue7;\red37\green37\blue37;\red0\green0\blue0;\red38\green38\blue38;\red0\green0\blue255;
\red46\green46\blue46;\red39\green73\blue255;}
{\*\expandedcolortbl;;\cssrgb\c27843\c27843\c27843;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c45882\c70588;
\cssrgb\c100000\c0\c0;\cssrgb\c19216\c19216\c19216;\cssrgb\c0\c0\c0;\cssrgb\c20000\c20000\c20000;\cssrgb\c0\c0\c100000;
\cssrgb\c23529\c23529\c23529;\cssrgb\c20000\c40000\c100000;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl504\partightenfactor0

\f0\b\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Constraint Satisfaction Problems\
\pard\pardeftab720\sl414\partightenfactor0

\fs28 \cf4 \strokec4 Soduko\'a0\

\f1\fs38\fsmilli19200 \cf5 \strokec5 INSTRUCTIONS
\f0 \cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl448\sa453\partightenfactor0

\f2\b0\fs32 \cf7 \cb3 \strokec7 In this assignment you will focus on\'a0constraint satisfaction problems. You will be implementing the AC-3 and backtracking algorithms to solve Sudoku puzzles. The objective of the game is just to \uc0\u64257 ll a 9 x 9 grid with numerical digits so that each column, each row, and each of the nine 3\'a0x 3 sub-grids (also called boxes) contains one of all of the digits 1 through\'a09. If you have not played the game before, you may visit\'a0{\field{\*\fldinst{HYPERLINK "http://www.sudoku.com/"}}{\fldrslt 
\f1\b \cf4 \strokec4 sudoku.com}}\cf8 \strokec8 \'a0to get a sense of how the\cf7 \strokec7 \'a0game works.
\f3 \cf6 \cb1 \strokec6 \

\f2 \cf7 \cb3 \strokec7 Please read all sections of\'a0the\'a0instructions carefully.\'a0In particular, note that you have a total of\'a0
\f4\b 5\'a0submission
\f2\b0 \'a0attempts.
\f3 \cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl448\sa453\partightenfactor0

\f1\b \cf7 \cb3 \strokec7 I.
\f2\b0 \'a0Introduction
\f3 \cf6 \cb1 \strokec6 \uc0\u8232 
\f1\b \cf7 \cb3 \strokec7 II.
\f2\b0 \'a0What You Need To Submit
\f3 \cf6 \cb1 \strokec6 \uc0\u8232 
\f1\b \cf7 \cb3 \strokec7 III.
\f2\b0 \'a0AC-3 Algorithm
\f3 \cf6 \cb1 \strokec6 \uc0\u8232 
\f1\b \cf7 \cb3 \strokec7 IV.
\f2\b0 \'a0Backtracking Algorithm
\f3 \cf6 \cb1 \strokec6 \uc0\u8232 
\f1\b \cf7 \cb3 \strokec7 V.
\f2\b0 \'a0Important Information
\f3 \cf6 \cb1 \strokec6 \uc0\u8232 
\f1\b \cf7 \cb3 \strokec7 VI.
\f2\b0 \'a0Before You\'a0Submit
\f3 \cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl448\partightenfactor0

\f1\b \cf5 \cb3 \strokec7 Bonus Points:
\f2\b0 \cf7 \'a0
\f5 \cb1 \

\f1\b \cf5 \cb3 Submitting project 4 before 04/26/2020, 23:30 UTC is eligible for bonus points (we count grades on your latest submission). Due to edX policy, all assignment grades are capped at 100%.
\f5\b0 \cf7 \cb1 \
\pard\pardeftab720\sl512\sa453\partightenfactor0

\f3 \cf6 \strokec6 \
\
\pard\pardeftab720\sl448\partightenfactor0

\f1\b \cf9 \cb3 \strokec7 The assignment's final due date is 5/17/2020, 23:30 UTC.\'a0
\f5\b0 \cf7 \cb1 \
\pard\pardeftab720\sl537\sa200\partightenfactor0

\f1\b\fs38\fsmilli19200 \cf7 \cb3 I.\'a0Introduction
\f0 \cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl440\partightenfactor0

\f5\b0\fs32 \cf7 \strokec7 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf7 \cb3 Consider the Sudoku puzzle as pictured below. There are 81\'a0
\f1\b variables
\f2\b0 \'a0in total, i.e. the tiles to be filled with digits. Each variable is named by its\'a0
\f1\b row
\f2\b0 \'a0and its\'a0
\f1\b column
\f2\b0 , and must be assigned a\'a0
\f1\b value
\f2\b0 \'a0from 1 to 9, subject to the constraint that no two cells in the same row, column, or box may contain the same value.
\f5 \cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf7 \
\pard\pardeftab720\sl448\qc\partightenfactor0

\f2 \cf7 
\f5 \
\pard\pardeftab720\sl440\partightenfactor0
\cf7 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf7 \cb3 In designing your classes, you may find it helpful to represent a Sudoku board with a Python dictionary. The keys of the dictionary will be the variable names, each of which corresponds directly to a\'a0location on the board. In other words, we use the variable names\'a0
\f1\b Al
\f2\b0 \'a0through\'a0
\f1\b A9
\f2\b0 \'a0for the top row (left to right), down to\'a0
\f1\b I1
\f2\b0 \'a0through\'a0
\f1\b I9
\f2\b0 \'a0for the bottom row. For example, in the example board above, we would have\'a0
\f6\i sudoku
\f2\i0 ["
\f1\b B1
\f2\b0 "] =\'a0
\f1\b 9
\f2\b0 , and\'a0
\f7\i sudoku
\f2\i0 ["
\f4\b E9
\f2\b0 "] =\'a0
\f1\b 8
\f2\b0 .\'a0This is the highly\'a0suggested representation,\'a0since\'a0it is easiest to frame the problem in terms of\'a0
\f4\b variables
\f2\b0 ,\'a0
\f4\b domains
\f2\b0 , and\'a0
\f4\b constraints
\f2\b0 \'a0if you start this way. However, you can choose other data structures if you prefer.\'a0
\f5 \cb1 \
\pard\pardeftab720\sl537\sa200\partightenfactor0

\f1\b\fs38\fsmilli19200 \cf7 \cb3 II.\'a0What You Need To Submit
\f0 \cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl440\partightenfactor0

\f5\b0\fs32 \cf7 \strokec7 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf7 \cb3 Your job in this assignment is to write\'a0
\f8 \cf9 driver.py
\f2 \cf7 , which intelligently solves\'a0Sudoku puzzles. Your program will be executed as follows:
\f5 \cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf7 \
\pard\pardeftab720\sl448\partightenfactor0

\f8 \cf9 \cb3 $ python3 driver.py <input_string>
\f5 \cf7 \cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf7 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf7 \cb3 In the starter code folder, you will find the file\'a0
\f8 \cf9 sudokus_start.txt
\f2 \cf7 , containing hundreds of sample Sudoku puzzles to be solved. Each Sudoku puzzle is represented as a single line of text, which starts from\'a0the top-left corner of the board, and enumerates the digits in each tile,\'a0row by row.\'a0In this assignment, we will use the number\'a0
\f4\b \cf10 zero
\f2\b0 \cf7 \'a0to indicate tiles that have not yet been filled.\cf10 \'a0\cf7 For example, the Sudoku board in the diagram shown above is represented as the string:
\f5 \cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf7 \
\pard\pardeftab720\sl448\partightenfactor0

\f8 \cf9 \cb3 00302060090030005001001806400
\f2 \cf7 ... (and so on)
\f5 \cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf7 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf7 \cb3 When executed as above, replacing "
\f8 \cf9 <input_string>
\f2 \cf7 " with any valid string representation of a Sudoku board (for instance, taking any Sudoku board from\'a0
\f8 \cf9 sudokus_start.txt
\f2 \cf7 ), your program will generate a file called\'a0
\f8 \cf9 output.txt
\f2 \cf7 , containing
\f1\b \'a0a single line
\f2\b0 \'a0of text representing the finished Sudoku board and the algorithm name (
\f1\b \cf9 AC3
\f2\b0 \cf7 \'a0or\'a0
\f1\b \cf9 BTS
\f2\b0 \cf7 , explained later)\'a0which solved the Sudoku board. You must use\'a0
\f1\b a single white space
\f2\b0 \'a0as a delimiter between the board and the algorithm name. For example, output.txt looks like:
\f5 \cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf7 \
\pard\pardeftab720\sl448\partightenfactor0

\f8 \cf9 \cb3 167523849984176523325489671798315264642798135531642798476831952213957486859264317 BTS
\f5 \cf7 \cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf7 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf7 \cb3 (single line, separated by a single white space)
\f5 \cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf7 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf7 \cb3 Since this board is solved, the string representation will contain no zeros.\'a0You may test your program extensively by using\'a0
\f8 \cf9 sudokus_finish.txt
\f2 \cf7 , which contains the solved versions of all of the same puzzles.
\f5 \cb1 \
\pard\pardeftab720\sl537\sa200\partightenfactor0

\f4\b\fs38\fsmilli19200 \cf7 \cb3 III.\'a0AC-3 Algorithm (
\f9 \cf11 \strokec11 AC3
\f4 \cf7 \strokec7 )
\f0 \cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl440\partightenfactor0

\f5\b0\fs32 \cf7 \strokec7 \
\pard\pardeftab720\sl448\partightenfactor0

\f10 \cf7 \cb3 First, implement the\'a0
\f4\b AC-3 algorithm
\f10\b0 . Test your code on the provided set of puzzles in\'a0
\f8 \cf9 sudokus_start.txt
\f10 \cf7 . To make things easier, you can write a separate wrapper script (bash, or python) to loop through all the puzzles to see if your program can solve them. As shown\'a0in\'a0
\f8 \cf9 sudokus_finish.txt
\f10 \cf7 , there are only 2/400 Sudoku boards\'a0which can be solved AC3 alone. Is this expected or unexpected?
\f5 \cb1 \
\pard\pardeftab720\sl537\sa200\partightenfactor0

\f4\b\fs38\fsmilli19200 \cf7 \cb3 IV.\'a0Backtracking Algorithm (
\f9 \cf9 \strokec9 BTS
\f4 \cf7 \strokec7 )
\f0 \cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl440\partightenfactor0

\f5\b0\fs32 \cf7 \strokec7 \
\pard\pardeftab720\sl448\partightenfactor0

\f10 \cf7 \cb3 Now, implement\'a0
\f4\b backtracking
\f10\b0 \'a0using the\'a0
\f4\b minimum remaining value
\f10\b0 \'a0heuristic. The order of values to be attempted\'a0for each variable is up to you. When a variable is assigned, apply\'a0
\f4\b forward checking
\f10\b0 \'a0to reduce variables domains.\'a0Test your code on the provided set of puzzles in\'a0
\f8 \cf9 sudokus_start.txt
\f10 \cf7 .\'a0Can you solve all puzzles now?
\f5 \cb1 \
\pard\pardeftab720\sl537\sa200\partightenfactor0

\f1\b\fs38\fsmilli19200 \cf7 \cb3 V.\'a0Important Information
\f0 \cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl440\partightenfactor0

\f5\b0\fs32 \cf7 \strokec7 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf7 \cb3 Please read the following information carefully. Before you post\'a0a clarifying question on the discussion board, make sure that your question is not already answered in the following sections.
\f5 \cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf7 \
\pard\pardeftab720\sl448\partightenfactor0

\f1\b \cf5 \cb3 1. Precedence over BTS
\f5\b0 \cf7 \cb1 \
\pard\pardeftab720\sl448\sa453\partightenfactor0

\f2 \cf7 \cb3 To check how powerful BTS\'a0is compared to AC3,\'a0
\f1\b you must execute AC-3 algorithm before Backtracking Search algorithm
\f2\b0 . That is, your program looks like this:
\f3 \cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl448\sa453\partightenfactor0

\f8 \cf9 \cb3 \strokec7 assignment = AC3(given_sudoku_board)\cb1 \uc0\u8232 \cb3 if (solved(assignment))\cb1 \uc0\u8232 \cb3 \'a0 \'a0 \'a0 \'a0 \'a0 return "<filled sudoku board>" + " AC3"\cb1 \uc0\u8232 \cb3 assignment = BTS(given_sudoku_board)\cb1 \uc0\u8232 \cb3 \'a0 \'a0 \'a0 \'a0 \'a0 return "<filled sudoku board>" + " BTS"
\f10 \cf7 \'a0
\f3 \cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl448\partightenfactor0

\f1\b \cf5 \cb3 \strokec7 2. Test-Run Your Code
\f5\b0 \cf7 \cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf7 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf7 \cb3 To avoid wasting submission attempts, please test-run your code on Vocareum, and make sure it successfully produces an output file with the correct format. You can do this by hitting the\'a0
\f1\b RUN
\f2\b0 \'a0button, which simply executes your program with a sample input string containing a valid starting Sudoku board. After you hit\'a0
\f1\b RUN
\f2\b0 , when your program terminates, you should locate the output file within your working directory. Make sure the\'a0board and the algorithm name is separated by a single white space.
\f5 \cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf7 \
\pard\pardeftab720\sl448\partightenfactor0

\f11\b \cf5 \cb3 3.\'a0Grading Submissions
\f5\b0 \cf7 \cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf7 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf7 \cb3 We will test your final program on\'a0
\f1\b 20 test cases
\f2\b0 . You can assume all test cases can be solved at least by BTS. Some of test cases might be solved by AC3 alone. Each input test case will be rated\'a0
\f1\b 5\'a0points
\f2\b0 \'a0for a successfully solved board, and zero for any other resultant output. In sum, your submission will be assessed out of a total of 100 points. The test cases are no different in nature than the hundreds of test cases already provided in your starter code folder, for which the solutions are also available. If you can solve all of those, your program will most likely get full credit.
\f5 \cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf7 \
\pard\pardeftab720\sl448\partightenfactor0

\f1\b \cf5 \cb3 4. Time Limit
\f5\b0 \cf7 \cb1 \
\pard\pardeftab720\sl440\partightenfactor0
\cf7 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf7 \cb3 By now, we expect that you have a good sense of appropriate data structures and object representations. Naive brute-force approaches to solving Sudoku puzzles may take minutes, or even hours, to [possibly never] terminate. However, a correctly implemented backtracking approach as specified above should take\'a0
\f1\b well under a minute
\f2\b0 \'a0per puzzle. The grader will provide some breathing room, but programs with much longer\'a0running times will\'a0be killed.
\f5 \cb1 \
\pard\pardeftab720\sl537\sa200\partightenfactor0

\f1\b\fs38\fsmilli19200 \cf7 \cb3 VI. BEFORE YOU SUBMIT
\f0 \cf6 \cb1 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl448\sa226\partightenfactor0
\ls1\ilvl0
\f1\fs32 \cf5 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Make sure
\f2\b0 \cf7 \strokec7 \'a0your code\'a0executes without fail on Vocareum. In particular, make sure you name your file correctly according to the instructions\'a0specified above, especially regarding different Python versions.
\f3 \cf6 \cb1 \strokec6 \
\ls1\ilvl0
\f1\b \cf5 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Bonus Credits for Early Submission:\'a0
\f2\b0 \cf7 \'a0If you finish this project assignment before
\f1\b \cf9 \'a0November 24th 2019 23:30 UTC,\cf7 \'a0
\f2\b0 \'a0you will get extra credits for this homework as a bonus (we count grades on your latest submission). Due to edX policy, all assignment grades are capped at 100%.
\f3 \cf6 \cb1 \strokec6 \
\ls1\ilvl0
\f1\b \cf5 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 You have an unlimited number of\'a0submissions
\f2\b0 \cf7 \strokec7 .
\f3 \cf6 \cb1 \strokec6 \
}