{\rtf1\ansi\ansicpg1252\cocoartf2512
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Verdana-Bold;\f1\fnil\fcharset0 HelveticaNeue-Bold;\f2\fnil\fcharset0 Verdana;
\f3\fnil\fcharset0 HelveticaNeue;\f4\fswiss\fcharset0 Helvetica;\f5\fnil\fcharset0 AppleSymbols;
\f6\froman\fcharset0 Palatino-Bold;\f7\fmodern\fcharset0 CourierNewPSMT;\f8\fswiss\fcharset0 Helvetica-Bold;
}
{\colortbl;\red255\green255\blue255;\red251\green0\blue7;\red255\green255\blue255;\red37\green37\blue37;
\red0\green0\blue0;\red38\green38\blue38;\red12\green96\blue165;\red46\green46\blue46;\red0\green0\blue255;
}
{\*\expandedcolortbl;;\cssrgb\c100000\c0\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c19216\c19216\c19216;
\cssrgb\c0\c0\c0;\cssrgb\c20000\c20000\c20000;\cssrgb\c0\c45882\c70588;\cssrgb\c23529\c23529\c23529;\cssrgb\c0\c0\c100000;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid2\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid3\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid102\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid103\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid202\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid203\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}}
\margl1440\margr1440\vieww25760\viewh16340\viewkind0
\deftab720
\pard\pardeftab720\sl537\sa200\partightenfactor0

\f0\b\fs38\fsmilli19200 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 8 PUZZLE GAME\
INSTRUCTIONS
\f1 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl448\sa453\partightenfactor0

\f2\b0\fs32 \cf5 \cb3 \strokec5 In this\'a0assignment\'a0you will create an agent to solve the 8
\f0\b -puzzle
\f2\b0 \'a0game. You may visit\cf6 \strokec6 \'a0{\field{\*\fldinst{HYPERLINK "http://mypuzzle.org/sliding"}}{\fldrslt 
\f0\b \cf7 \strokec7 mypuzzle.org/sliding}}\'a0\cf5 \strokec5 for a refresher of the rules of the game. You will implement and compare several search algorithms and collect some statistics related to their performances. Please read all sections of\'a0the\'a0instructions carefully:
\f3 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl448\sa453\partightenfactor0

\f0\b \cf5 \cb3 \strokec5 I.
\f2\b0 \'a0Introduction
\f3 \cf4 \cb1 \strokec4 \uc0\u8232 
\f0\b \cf5 \cb3 \strokec5 II.
\f2\b0 \'a0Algorithm\'a0Review
\f3 \cf4 \cb1 \strokec4 \uc0\u8232 
\f0\b \cf5 \cb3 \strokec5 III.
\f2\b0 \'a0What You Need To Submit
\f3 \cf4 \cb1 \strokec4 \uc0\u8232 
\f0\b \cf5 \cb3 \strokec5 IV.
\f2\b0 \'a0What Your Program Outputs
\f3 \cf4 \cb1 \strokec4 \uc0\u8232 
\f0\b \cf5 \cb3 \strokec5 V.
\f2\b0 \'a0Important Information
\f3 \cf4 \cb1 \strokec4 \uc0\u8232 
\f0\b \cf5 \cb3 \strokec5 VI.
\f2\b0 \'a0Before You\'a0Finish
\f3 \cf4 \cb1 \strokec4 \

\f0\b \cf5 \cb3 \strokec5 NOTE
\f2\b0 : This project incorporates material learned from both\'a0
\f0\b Week 2
\f2\b0 \'a0(uninformed search) and\'a0
\f0\b Week 3
\f2\b0 \'a0(informed search). Since this project involves a fair amount of programming and design, we are releasing\'a0it now to let you get started earlier. In particular, do not worry if\'a0certain concepts (e.g. heuristics, A-Star, etc.) are not familiar at this point; you will understand everything you need to know by Week 3.
\f3 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl448\sa453\partightenfactor0

\f2 \cf5 \cb3 \strokec5 Also\'a0note that there is\'a0
\f0\b skeleton code available for use
\f2\b0 \'a0(see the third tab of this assignment). This is\'a0
\f0\b completely optional to use
\f2\b0 , and you may alter it as much as you'd like. You\'a0may also complete the assignment without\'a0referring to the skeleton code at all.
\f3 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl537\sa200\partightenfactor0

\f0\b\fs38\fsmilli19200 \cf5 \cb3 \strokec5 I.\'a0Introduction
\f1 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0

\f4\b0\fs32 \cf5 \strokec5 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf5 \cb3 An instance of the N-puzzle game consists of a\'a0
\f0\b board
\f2\b0 \'a0holding N = m^2 \uc0\u8722  1 (m = 3, 4, 5, ...) distinct movable tiles, plus an empty space. The tiles are numbers from the set \{1, \'85, m^2 \u8722  1\}. For any such board, the empty space may be legally swapped with any tile horizontally or vertically adjacent to it. In this assignment, we will represent the blank space with the number 0 and focus on the m = 3 case (8-puzzle).
\f4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf5 \cb3 Given an initial\'a0
\f0\b state
\f2\b0 \'a0of the board, the combinatorial search problem is to find a sequence of moves that transitions this state to the goal state; that is, the configuration with all tiles arranged in ascending order 
\f5 \uc0\u10216 
\f2 0, 1, \'85, m^2 \uc0\u8722  1
\f5 \uc0\u10217 
\f2 . The search space is the set of all possible states reachable from the initial state.
\f4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf5 \cb3 The blank space may be swapped with a component in one of the four directions \{\'91Up\'92, \'91Down\'92, \'91Left\'92, \'91Right\'92\}, one move at a time. The cost of moving from one configuration of the board to another is the same and equal to one. Thus, the total cost of path is equal to the number of moves made from the initial state to the goal state.
\f4 \cb1 \
\pard\pardeftab720\sl537\sa200\partightenfactor0

\f0\b\fs38\fsmilli19200 \cf5 \cb3 II.\'a0Algorithm Review
\f1 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0

\f4\b0\fs32 \cf5 \strokec5 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf5 \cb3 Recall from the lectures that searches begin by visiting the root node of the search tree, given by the initial state. Among other book-keeping details,\'a0three major\'a0things happen in sequence in order to\'a0visit a node:
\f4 \cb1 \
\pard\tx1660\tx2160\pardeftab720\li2160\fi-2160\sl448\sa226\partightenfactor0
\ls1\ilvl2
\f2 \cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9642 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 First, we\'a0
\f6\b \cf5 \strokec5 remove
\f2\b0 \'a0a node from the frontier set.
\f3 \cf4 \cb1 \strokec4 \
\pard\tx1660\tx2160\pardeftab720\li2160\fi-2160\sl448\sa226\partightenfactor0
\ls1\ilvl2
\f2 \cf5 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9642 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Second, we\'a0
\f6\b check
\f2\b0 \'a0the state against the goal state to determine if a solution has been found.
\f3 \cf4 \cb1 \strokec4 \
\ls1\ilvl2
\f2 \cf5 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9642 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Finally, if the result of the check is negative, we then\'a0
\f6\b expand
\f2\b0 \'a0the node. To expand a given node, we generate successor nodes adjacent to the current node, and add them to the frontier set. Note that if these successor nodes are already in the frontier, or have already been visited, then they should\'a0\ul not\ulnone \'a0be added to the\'a0frontier again.
\f3 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf5 \cb3 \strokec5 This describes the life-cycle of a visit, and is the basic order of operations for search agents in this assignment\'97(1) remove, (2) check, and (3) expand.\'a0In this assignment, we will implement algorithms as described here. Please refer to lecture notes for further details, and review the lecture pseudocode before you begin the assignment.
\f4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \
\pard\pardeftab720\sl448\partightenfactor0

\f0\b \cf2 \cb3 IMPORTANT
\f2\b0 \cf8 :\'a0\cf5 Note that you may encounter implementations elsewhere that attempt to short-circuit this order by performing the goal-check on successor nodes immediately upon expansion of a parent node. For example, Russell & Norvig's implementation of breadth-first search\'a0does precisely this. Doing so may lead to edge-case gains in efficiency, but do not alter the general characteristics of complexity and optimality for each method. For simplicity and grading purposes\'a0in this assignment,\'a0
\f0\b do\'a0not make such modifications to algorithms learned in lecture
\f2\b0 .
\f4 \cb1 \
\pard\pardeftab720\sl537\sa200\partightenfactor0

\f0\b\fs38\fsmilli19200 \cf5 \cb3 III.\'a0What You Need To Submit
\f1 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0

\f4\b0\fs32 \cf5 \strokec5 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf5 \cb3 Your job in this assignment is to write\'a0\cf9 driver.py\cf5 , which solves any 8-puzzle board when given an arbitrary starting configuration. The program will be executed as follows:
\f4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf9 \cb3 $ python3 driver.py <method> <board>
\f7 \cf5 \cb1 \
\pard\pardeftab720\partightenfactor0

\f4 \cf5 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf5 \cb3 The method argument will be one of the following. You need to implement all three of them:
\f4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf9 \cb3 bfs\cf5 \'a0(Breadth-First Search)
\f4 \cb1 \

\f2 \cf9 \cb3 dfs\cf5 \'a0(Depth-First Search)
\f4 \cb1 \

\f2 \cf9 \cb3 ast\cf5 \'a0(A-Star Search)
\f4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf5 \cb3 The board argument will be a comma-separated list of integers containing no spaces. For example, to use the bread-first search strategy to solve the input board given by the starting configuration \{0,8,7,6,5,4,3,2,1\}, the program will be executed like so (with no spaces between commas):
\f4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf9 \cb3 $ python3 driver.py bfs 0,8,7,6,5,4,3,2,1
\f7 \cf5 \cb1 \
\pard\pardeftab720\partightenfactor0

\f4 \cf5 \
\pard\pardeftab720\sl448\partightenfactor0

\f0\b \cf2 \cb3 IMPORTANT
\f2\b0 \cf8 : The version of the python that we are using is\'a0
\f0\b Python 3.6.4.
\f4\b0 \cf5 \cb1 \
\pard\pardeftab720\sl537\sa200\partightenfactor0

\f0\b\fs38\fsmilli19200 \cf5 \cb3 IV.\'a0What Your Program Outputs
\f1 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0

\f4\b0\fs32 \cf5 \strokec5 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf5 \cb3 When executed, your program will create / write to a file called\'a0\cf9 output.txt\cf5 , containing the following statistics:
\f4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf9 \cb3 path_to_goal\cf5 : the sequence of moves taken to reach the goal
\f4 \cb1 \

\f2 \cf9 \cb3 cost_of_path\cf5 : the number of moves taken to reach the goal
\f4 \cb1 \

\f2 \cf9 \cb3 nodes_expanded\cf5 : the number of nodes that have been expanded
\f4 \cb1 \

\f2 \cf9 \cb3 search_depth\cf5 : the depth within the search tree\'a0when the goal node is\'a0found
\f4 \cb1 \

\f2 \cf9 \cb3 max_search_depth\cf5 :\'a0 the maximum depth\'a0of the search tree in the lifetime of the algorithm
\f4 \cb1 \

\f2 \cf9 \cb3 running_time\cf5 : the total running time of the search instance, reported in seconds
\f4 \cb1 \

\f2 \cf9 \cb3 max_ram_usage\cf5 : the maximum RAM usage in the lifetime of the process as measured by the\'a0
\f0\b ru_maxrss
\f2\b0 \'a0attribute in the\'a0
\f0\b resource
\f2\b0 \'a0module, reported in megabytes
\f4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \
\pard\pardeftab720\sl448\partightenfactor0

\f0\b \cf2 \cb3 Example #1:\'a0Breadth-First Search
\f4\b0 \cf5 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf5 \cb3 Suppose\'a0the program is executed for breadth-first search as follows:
\f4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf9 \cb3 $ python3 driver.py bfs 1,2,5,3,4,0,6,7,8
\f7 \cf5 \cb1 \
\pard\pardeftab720\partightenfactor0

\f4 \cf5 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf5 \cb3 Which\'a0should lead to the following solution\'a0to the input board:
\f4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf5 \pard\pardeftab720\sl448\partightenfactor0

\f4 \cf5 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf3 \cb3 .
\f4 \cf5 \cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf5 \cb3 The output file ({\field{\*\fldinst{HYPERLINK "https://courses.edx.org/asset-v1:ColumbiaX+CSMM.101x+2T2017+type@asset+block@bfs_ex_.txt"}}{\fldrslt \cf7 example}}) will contain\'a0
\f0\b exactly
\f2\b0 \'a0the following lines:
\f4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf9 \cb3 path_to_goal: ['Up', 'Left', 'Left']
\f7 \cf5 \cb1 \

\f2 \cf9 \cb3 cost_of_path: 3
\f7 \cf5 \cb1 \

\f2 \cf9 \cb3 nodes_expanded: 10
\f7 \cf5 \cb1 \

\f2 \cf9 \cb3 search_depth: 3
\f7 \cf5 \cb1 \

\f2 \cf9 \cb3 max_search_depth: 4
\f7 \cf5 \cb1 \

\f2 \cf9 \cb3 running_time: 0.00188088
\f7 \cf5 \cb1 \

\f2 \cf9 \cb3 max_ram_usage: 0.07812500
\f7 \cf5 \cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf3 \cb3 .
\f4 \cf5 \cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\f8\b \cf2 \cb3 Example #2: Depth-First Search
\f4\b0 \cf5 \cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf3 \cb3 .
\f4 \cf5 \cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf5 \cb3 Suppose the program is executed for depth-first search as follows:
\f4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf9 \cb3 $ python3 driver.py dfs 1,2,5,3,4,0,6,7,8
\f7 \cf5 \cb1 \
\pard\pardeftab720\partightenfactor0

\f4 \cf5 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf5 \cb3 Which\'a0should lead to the following solution\'a0to the input board:
\f4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf5 \pard\pardeftab720\sl448\partightenfactor0

\f4 \cf5 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf3 \cb3 .
\f4 \cf5 \cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf5 \cb3 The output file ({\field{\*\fldinst{HYPERLINK "https://courses.edx.org/asset-v1:ColumbiaX+CSMM.101x+2T2017+type@asset+block@dfs_ex_.txt"}}{\fldrslt \cf7 example}}) will contain\'a0
\f0\b exactly
\f2\b0 \'a0the following lines:
\f4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf9 \cb3 path_to_goal: ['Up', 'Left', 'Left']
\f7 \cf5 \cb1 \

\f2 \cf9 \cb3 cost_of_path: 3
\f7 \cf5 \cb1 \

\f2 \cf9 \cb3 nodes_expanded: 181437
\f7 \cf5 \cb1 \

\f2 \cf9 \cb3 search_depth: 3
\f7 \cf5 \cb1 \

\f2 \cf9 \cb3 max_search_depth: 66125
\f7 \cf5 \cb1 \

\f2 \cf9 \cb3 running_time: 5.01608433
\f7 \cf5 \cb1 \

\f2 \cf9 \cb3 max_ram_usage: 4.23940217
\f7 \cf5 \cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf3 \cb3 .
\f4 \cf5 \cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf5 \cb3 Other test cases are available on\'a0
\f0\b Week 2 Project: Implementation FAQs
\f2\b0 \'a0page.
\f4 \cb1 \
\uc0\u8232 \u8232 \
\pard\pardeftab720\sl448\partightenfactor0

\f8\b \cf2 \cb3 Note on Correctness
\f4\b0 \cf5 \cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf3 \cb3 .
\f4 \cf5 \cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf5 \cb3 Of course, the specific values for\'a0\cf9 running_time\cf5 \'a0and\'a0\cf9 max_ram_usage\cf5 \'a0variables\'a0will\'a0vary greatly depending on the machine\'a0used and the specific implementation details; there is no "correct" value to look for. They are intended to enable you to check the time and space complexity characteristics of your code, and you should spend time to do so. All the\'a0other variables, however, will have\'a0
\f0\b one and only one
\f2\b0 \'a0correct answer for\'a0each algorithm and initial board specified in the sample\'a0test cases.
\f0\b *
\f2\b0 \'a0A good way to check the correctness of your\'a0program is to walk through small\'a0examples by hand, like the ones above.
\f4 \cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf3 \cb3 .
\f4 \cf5 \cb1 \
\pard\pardeftab720\sl448\partightenfactor0

\f0\b \cf5 \cb3 *
\f2\b0 \'a0In general,\'a0
\f0\b for any initial board whatsoever
\f2\b0 , for BFS and DFS there is one and only one correct answer. For A*, however, your\'a0output of\'a0\cf9 nodes_expanded\cf5 \'a0may vary a little, depending on specific implementation details. You will be fine as long as your algorithm conforms to all\'a0
\f0\b specifications
\f2\b0 \'a0listed in these instructions.\'a0
\f4 \cb1 \
\pard\pardeftab720\sl537\sa200\partightenfactor0

\f0\b\fs38\fsmilli19200 \cf5 \cb3 V.\'a0Important Information
\f1 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0

\f4\b0\fs32 \cf5 \strokec5 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf5 \cb3 Please read the following information carefully. Since this is the first programming project, we are providing many hints and explicit instructions.\'a0Before you post\'a0a clarifying question on the discussion board, make sure that your question is not already answered in the following sections.
\f4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \
\pard\pardeftab720\sl448\partightenfactor0

\f0\b \cf2 \cb3 1.\'a0Implementation
\f4\b0 \cf5 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf5 \cb3 You will implement the following three\'a0algorithms as demonstrated in lecture. In particular:
\f4 \cb1 \
\pard\tx1660\tx2160\pardeftab720\li2160\fi-2160\sl448\sa226\partightenfactor0
\ls2\ilvl2
\f6\b \cf5 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9642 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Breadth-First Search
\f2\b0 . Use an explicit queue, as shown in lecture.
\f3 \cf4 \cb1 \strokec4 \
\ls2\ilvl2
\f6\b \cf5 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9642 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Depth-First Search
\f2\b0 . Use an explicit stack, as shown in lecture.
\f3 \cf4 \cb1 \strokec4 \
\ls2\ilvl2
\f6\b \cf5 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9642 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 A-Star Search
\f2\b0 . Use a priority queue, as shown in lecture. For\'a0the choice of heuristic, use the\'a0Manhattan\'a0priority function; that is, the sum of the distances of the tiles from their goal positions. Note that the blanks space is not considered an actual tile here.
\f3 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl448\partightenfactor0

\f0\b \cf2 \cb3 \strokec5 2. Order of Visits
\f4\b0 \cf5 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \
\pard\pardeftab720\sl448\partightenfactor0

\f2 \cf5 \cb3 In this assignment, where an arbitrary choice must be made, we always\'a0
\f0\b visit
\f2\b0 \'a0child nodes in the "
\f0\b UDLR
\f2\b0 " order; that is, [\'91Up\'92, \'91Down\'92, \'91Left\'92, \'91Right\'92] in that exact order. Specifically:\'a0
\f4 \cb1 \
\pard\tx1660\tx2160\pardeftab720\li2160\fi-2160\sl448\sa226\partightenfactor0
\ls3\ilvl2
\f0\b \cf5 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9642 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Breadth-First Search
\f2\b0 . Enqueue in UDLR order; dequeuing results in\'a0UDLR order.
\f3 \cf4 \cb1 \strokec4 \
\ls3\ilvl2
\f0\b \cf5 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9642 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Depth-First Search
\f2\b0 .\'a0Push onto the stack in reverse-UDLR order; popping off results in UDLR order.
\f3 \cf4 \cb1 \strokec4 \
\ls3\ilvl2
\f0\b \cf5 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9642 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 A-Star\'a0Search
\f2\b0 .\'a0Since you are using a priority queue, what happens when there are duplicate keys? What do you need to do to ensure that nodes are retrieved from the priority queue in the desired order?
\f3 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl448\sa453\partightenfactor0

\f0\b \cf2 \cb3 \strokec5 3. Submission\'a0Test Cases
\f3\b0 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl448\sa453\partightenfactor0

\f2 \cf5 \cb3 \strokec5 You can\'a0
\f0\b submit
\f2\b0 \'a0your\'a0project any number of times before the deadline. Only the final submission will be graded. Following each submission, all three\'a0of\'a0your algorithms\'a0will be automatically\'a0run on\'a0two sample test cases each, for a total of\'a0
\f0\b 6
\f2\b0 \'a0distinct tests:
\f3 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl448\sa453\partightenfactor0

\f0\b \cf5 \cb3 \strokec5 Test Case #1\cb1 \uc0\u8232 
\f2\b0 \cf9 \cb3 \strokec9 python3 driver.py bfs 3,1,2,0,4,5,6,7,8
\f3 \cf4 \cb1 \strokec4 \uc0\u8232 
\f2 \cf9 \cb3 \strokec9 python3 driver.py dfs 3,1,2,0,4,5,6,7,8
\f3 \cf4 \cb1 \strokec4 \uc0\u8232 
\f2 \cf9 \cb3 \strokec9 python3 driver.py ast 3,1,2,0,4,5,6,7,8
\f3 \cf4 \cb1 \strokec4 \

\f0\b \cf5 \cb3 \strokec5 Test Case #2\cb1 \uc0\u8232 
\f2\b0 \cf9 \cb3 \strokec9 python3 driver.py bfs 1,2,5,3,4,0,6,7,8
\f3 \cf4 \cb1 \strokec4 \uc0\u8232 
\f2 \cf9 \cb3 \strokec9 python3 driver.py dfs 1,2,5,3,4,0,6,7,8
\f3 \cf4 \cb1 \strokec4 \uc0\u8232 
\f2 \cf9 \cb3 \strokec9 python3 driver.py ast 1,2,5,3,4,0,6,7,8
\f3 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl448\sa453\partightenfactor0

\f2 \cf5 \cb3 \strokec5 This\'a0is provided as a sanity check for your code and the required output format. In particular, this is intended\'a0to ensure that you do not lose credit for incorrect output formatting.\'a0
\f0\b Make sure your code passes at least\'a0these two test cases
\f2\b0 . You will see that the results of each test are\'a0assessed by\'a08\'a0items: 7 items are listed in\'a0
\f0\b Section\'a0IV. What Your Program Outputs
\f2\b0 . The last point is\'a0for code that executes and produces any output at all. Each item is worth 0.75 point.
\f3 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl448\sa453\partightenfactor0

\f0\b \cf2 \cb3 \strokec5 4. Grading and Stress Tests
\f3\b0 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl448\sa453\partightenfactor0

\f2 \cf5 \cb3 \strokec5 We will grade your\'a0project by running\'a0
\f0\b additional test cases
\f2\b0 \'a0on your code. In particular, there will be five\'a0test cases in total, each tested on all three\'a0of your algorithms, for a total of\'a0
\f0\b 15
\f2\b0 \'a0distinct tests. Similar to the submission test cases, each test will be graded by 8\'a0items, for a total of 90\'a0points.\'a0
\f0\b Plus, we give 10 points for code completing all 15 test cases within 10 minutes
\f2\b0 . If you implement your code with reasonable\'a0designs of data structures, your code will solve all 15 test cases within a minute in total.\'a0We will be using a wide variety of inputs to stress-test your algorithms to check for correctness of implementation. So, we recommend that you test your own code extensively.
\f3 \cf4 \cb1 \strokec4 \

\f2 \cf5 \cb3 \strokec5 Do not worry about checking for\'a0
\f0\b malformed input
\f2\b0 \'a0boards, including boards of non-square dimensions, or unsolvable boards.\'a0
\f3 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl448\sa453\partightenfactor0

\f0\b \cf5 \cb3 \strokec5 You will not be graded on the absolute values of your running-time or RAM usage statistics.
\f2\b0 \'a0The values of these statistics can vary widely depending on the machine.\'a0
\f0\b However, we recommend that you take advantage of them in testing your code.
\f2\b0 \'a0Try batch-running your algorithms on various inputs, and plotting your results on a graph\'a0to learn more about the\'a0space and time complexity characteristics of your code. Just because an algorithm provides the correct path to goal does not mean it has been implemented correctly.
\f3 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl448\sa453\partightenfactor0

\f0\b \cf2 \cb3 \strokec2 5. Tips on Getting Started
\f3\b0 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl448\sa453\partightenfactor0

\f2 \cf4 \cb3 Begin by writing a class to represent the\'a0
\f0\b state
\f2\b0 \'a0of the game at a given turn, including parent and child nodes. We suggest writing a separate\'a0
\f0\b solver
\f2\b0 \'a0class to work with the state class. Feel free to experiment with your design, for example including a\'a0
\f0\b board
\f2\b0 \'a0class to represent the low-level physical configuration of the tiles, delegating the high-level functionality to the state class. When comparing your code with pseudocode, you might come up with another class for organising specific aspects of your search algorithm elegantly.
\f3 \cb1 \

\f2 \cb3 You will not be graded on your design, so you are at a liberty to choose among your favorite programming paradigms. Students have successfully completed this project using an entirely object-oriented approach, and others have done so with a purely functional approach. Your submission will receive full credit as long as your driver program outputs the correct information.
\f3 \cb1 \
\pard\pardeftab720\sl537\sa200\partightenfactor0

\f0\b\fs38\fsmilli19200 \cf5 \cb3 \strokec5 VI.\'a0Before You\'a0Finish
\f1 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl512\sa453\partightenfactor0

\f3\b0\fs32 \cf4 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl448\sa226\partightenfactor0
\ls4\ilvl0
\f0\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Make sure
\f2\b0 \cf5 \strokec5 \'a0your code passes at least the\'a0two submission test cases.\'a0
\f3 \cf4 \cb1 \strokec4 \
\ls4\ilvl0
\f0\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Make sure
\f2\b0 \cf5 \strokec5 \'a0your algorithms generate the correct solution for an arbitrary solvable problem instance of 8-puzzle.
\f3 \cf4 \cb1 \strokec4 \
\ls4\ilvl0
\f0\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Make sure
\f2\b0 \cf5 \strokec5 \'a0your program always terminates without error, and in a reasonable amount of time.\'a0
\f0\b You will receive zero points from the grader if your program fails to terminate. Running times of more than a minute or two may indicate a problem with your implementation.
\f2\b0 \'a0If your implementation exceeds the time\'a0limit allocated (20 minutes for all test cases), your grade may be incomplete.
\f3 \cf4 \cb1 \strokec4 \
\ls4\ilvl0
\f0\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Make sure
\f2\b0 \cf5 \'a0your program output follows the specified format exactly. In particular, for the path to goal, use square brackets to surround the list of items, use single quotes around\'a0each item, and capitalize the first letter of each item. Round floating point numbers to 8\'a0places after the decimal. You will not receive proper credit from the grader if your format differs from the provided examples above.
\f3 \cf4 \cb1 \strokec4 \
\ls4\ilvl0
\f0\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Bonus Credits for Early Submission:\'a0
\f2\b0 \cf5 \'a0If you finish this project assignment before
\f0\b \cf9 \'a0March\'a08th 2020 23:30 UTC\cf5 \'a0
\f2\b0 \'a0you will get extra credits for this homework as a bonus (we count grades on your latest submission). Due to edX policy, all assignment grades are capped at 100%.}